[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project]
name = "{{ python_package_distribution_name }}"
description = "{{ project_description }}"
authors = [{name = "{{ author_fullname }}", email = "{{ author_email }}"}]
license = {text = "
    {%- if copyright_license == "Academic Free License v3.0" -%}
    AFL-3.0
    {%- elif copyright_license == "Apache License 2.0" -%}
    Apache-2.0
    {%- elif copyright_license == "Artistic License 2.0" -%}
    Artistic-2.0
    {%- elif copyright_license == "BSD 2-Clause \"Simplified\" License" -%}
    BSD-2-Clause
    {%- elif copyright_license == "BSD 3-Clause Clear License" -%}
    BSD-3-Clause-Clear
    {%- elif copyright_license == "BSD 3-Clause \"New\" or \"Revised\" License" -%}
    BSD-3-Clause
    {%- elif copyright_license == "Boost Software License 1.0" -%}
    BSL-1.0
    {%- elif copyright_license == "Creative Commons Attribution 4.0" -%}
    CC-BY-4.0
    {%- elif copyright_license == "Creative Commons Attribution Share Alike 4.0" -%}
    CC-BY-SA-4.0
    {%- elif copyright_license == "Creative Commons Zero v1.0 Universal" -%}
    CC0-1.0
    {%- elif copyright_license == "Do What The F*ck You Want To Public License" -%}
    WTFPL
    {%- elif copyright_license == "Educational Community License v2.0" -%}
    ECL-2.0
    {%- elif copyright_license == "Eclipse Public License 1.0" -%}
    EPL-1.0
    {%- elif copyright_license == "Eclipse Public License 2.0" -%}
    EPL-2.0
    {%- elif copyright_license == "European Union Public License 1.1" -%}
    EUPL-1.1
    {%- elif copyright_license == "European Union Public License 1.2" -%}
    EUPL-1.2
    {%- elif copyright_license == "GNU Affero General Public License v3.0" -%}
    AGPL-3.0
    {%- elif copyright_license == "GNU General Public License v2.0" -%}
    GPL-2.0
    {%- elif copyright_license == "GNU General Public License v3.0" -%}
    GPL-3.0
    {%- elif copyright_license == "GNU Lesser General Public License v2.1" -%}
    LGPL-2.1
    {%- elif copyright_license == "GNU Lesser General Public License v3.0" -%}
    LGPL-3.0
    {%- elif copyright_license == "ISC License" -%}
    ISC
    {%- elif copyright_license == "LaTeX Project Public License v1.3c" -%}
    LPPL-1.3c
    {%- elif copyright_license == "MIT License" -%}
    MIT
    {%- elif copyright_license == "Mozilla Public License 2.0" -%}
    MPL-2.0
    {%- elif copyright_license == "Microsoft Public License" -%}
    MS-PL
    {%- elif copyright_license == "Microsoft Reciprocal License" -%}
    MS-RL
    {%- elif copyright_license == "University of Illinois/NCSA Open Source License" -%}
    NCSA
    {%- elif copyright_license == "SIL Open Font License 1.1" -%}
    OFL-1.1
    {%- elif copyright_license == "Open Software License 3.0" -%}
    OSL-3.0
    {%- elif copyright_license == "PostgreSQL License" -%}
    PostgreSQL
    {%- elif copyright_license == "The Unlicense" -%}
    Unlicense
    {%- elif copyright_license == "zlib License" -%}
    Zlib
    {%- endif %}"}
readme = "README.md"
requires-python = ">=3.9"
keywords = []
dynamic = ["version"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Documentation",
    "Topic :: Software Development",
    "Topic :: Utilities",
    "Typing :: Typed",
]
dependencies = []

[project.urls]
Homepage = "https://{{ repository_namespace }}.{{ repository_provider.rsplit('.', 1)[0] }}.io/{{ repository_name }}"
Documentation = "https://{{ repository_namespace }}.{{ repository_provider.rsplit('.', 1)[0] }}.io/{{ repository_name }}"
Changelog = "https://{{ repository_namespace }}.{{ repository_provider.rsplit('.', 1)[0] }}.io/{{ repository_name }}/changelog"
Repository = "https://{{ repository_provider }}/{{ repository_namespace }}/{{ repository_name }}"
Issues = "https://{{ repository_provider }}/{{ repository_namespace }}/{{ repository_name }}/issues"
Discussions = "https://{{ repository_provider }}/{{ repository_namespace }}/{{ repository_name }}/discussions"
Gitter = "https://gitter.im/{% if repository_namespace != author_username %}{{ repository_namespace }}/{{ repository_name }}{% else %}{{ repository_name }}/community{% endif %}"


{% if python_package_command_line_name -%}
[project.scripts]
{{ python_package_command_line_name }} = "{{ python_package_import_name }}.cli:main"

{% endif -%}

[tool.pdm]
version = {source = "scm"}
plugins = [
    "pdm-multirun",
]

[tool.pdm.build]
package-dir = "src"
editable-backend = "editables"

[tool.pdm.dev-dependencies]
duty = [ "duty>=1.2.0" ]
maintain = [
    "towncrier>=23.11.0",
]
docs = [
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-material>=9.5.7"
]
quality = [
    "ruff>=0.0",
    "griffe>=0.40.0",
]
tests = [
    "pytest>=7.4",
    "pytest-cov>=4.1",
    "pytest-randomly>=3.15",
    "pytest-xdist>=3.3",
]
typing = [
    "pyright>=1.1.349",
    "types-markdown>=3.5",
    "types-pyyaml>=6.0",
]
security = [
    "safety>=2.3",
]


[tool.ruff]
target-version = "py39"
line-length = 120
exclude = [
    "fixtures",
    "site",
]
select = [
    "A",
    "ANN",
    "ARG",
    "B",
    "BLE",
    "C",
    "C4",
    "COM",
    "D",
    "DTZ",
    "E",
    "ERA",
    "EXE",
    "F",
    "FBT",
    "G",
    "I",
    "ICN",
    "INP",
    "ISC",
    "N",
    "PGH",
    "PIE",
    "PL",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "PT",
    "PYI",
    "Q",
    "RUF",
    "RSE",
    "RET",
    "S",
    "SIM",
    "SLF",
    "T",
    "T10",
    "T20",
    "TCH",
    "TID",
    "TRY",
    "UP",
    "W",
    "YTT",
]
ignore = [
    "A001",  # Variable is shadowing a Python builtin
    "ANN101",  # Missing type annotation for self
    "ANN102",  # Missing type annotation for cls
    "ANN204",  # Missing return type annotation for special method __str__
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
    "ARG005",  # Unused lambda argument
    "C901",  # Too complex
    "D105",  # Missing docstring in magic method
    "D417",  # Missing argument description in the docstring
    "E501",  # Line too long
    "ERA001",  # Commented out code
    "G004",  # Logging statement uses f-string
    "PLR0911",  # Too many return statements
    "PLR0912",  # Too many branches
    "PLR0913",  # Too many arguments to function call
    "PLR0915",  # Too many statements
    "SLF001", # Private member accessed
    "TRY003",  # Avoid specifying long messages outside the exception class
]

[tool.ruff.per-file-ignores]
"src/*/cli.py" = [
    "T201",  # Print statement
]
"src/*/debug.py" = [
    "T201",  # Print statement
]
"scripts/*.py" = [
    "INP001",  # File is part of an implicit namespace package
    "T201",  # Print statement
]
"tests/*.py" = [
    "ANN201", # Missing return type annotation for public functions
    "ARG005",  # Unused lambda argument
    "FBT001",  # Boolean positional arg in function definition
    "PLR2004",  # Magic value used in comparison
    "S101",  # Use of assert detected
]

[tool.ruff.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.isort]
known-first-party = ["{{ python_package_import_name }}"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 80

[tool.pytest.ini_options]
norecursedirs = [
  ".git",
  ".tox",
  ".env",
  "dist",
  "build",
]
addopts = [
  "--cov"
]
testpaths = [
    "tests",
    "integration",
]

[tool.coverage.run]
branch = true
parallel = true
source = [
  "src/",
  "tests/"
]

[tool.coverage.paths]
equivalent = [
  "src/",
  "__pypackages__/"
]

[tool.coverage.report]
precision = 2
omit = [
  "src/*/__init__.py",
  "src/*/__main__.py",
  "tests/__init__.py",
]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING"
]
[tool.coverage.json]
output = "htmlcov/coverage.json"

